{"version":3,"sources":["api/location.js","api/index.js","api/weather.js","constants/dates.js","helpers/dates.js","components/shared/Form/index.jsx","components/WeatherCard/index.jsx","components/App.jsx","reportWebVitals.js","index.js"],"names":["getUserLocation","lat","lon","a","url","fetch","data","json","baseUrl","apiKey","sendRequest","path","query","method","body","headers","requestUrl","options","mode","JSON","stringify","response","get","Error","getCurrentWeather","queryString","Object","keys","forEach","key","generateQueryString","getForecastWeather","request","type","language","unit","location","name","country","region","timezone_id","localtime","localtime_epoch","utc_offset","current","observation_time","temperature","weather_code","weather_icons","weather_descriptions","wind_speed","wind_degree","wind_dir","pressure","precip","humidity","cloudcover","feelslike","uv_index","visibility","forecast","date","date_epoch","astro","sunrise","sunset","moonrise","moonset","moon_phase","moon_illumination","mintemp","maxtemp","avgtemp","totalsnow","sunhour","hourly","time","heatindex","dewpoint","windchill","windgust","chanceofrain","chanceofremdry","chanceofwindy","chanceofovercast","chanceofsunshine","chanceoffrost","chanceofhightemp","chanceoffog","chanceofsnow","chanceofthunder","getHistoricalWeather","historical","DATE_FORMATS","formatDate","Date","format","moment","Form","onSubmitCallback","closeFormCallback","useState","startDate","setStartDate","getDateDiff","now","dateOne","dateTwo","momentDateOne","momentDateTwo","diff","getDifference","getMethodForWeather","startOf","historical_date","forecast_days","handleSubmit","event","preventDefault","formData","target","value","methodData","console","error","className","onSubmit","htmlFor","id","placeholder","selected","onChange","WeatherCard","weatherData","src","alt","App","setWeatherData","isLoading","setIsLoading","isFormVisible","setIsFormVisible","userCity","setUserCity","useEffect","Promise","resolve","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","city","log","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAEaA,EAAe,uCAAG,WAAOC,EAAKC,GAAZ,iBAAAC,EAAA,6DACrBC,EADqB,4EACsDH,EADtD,sBACuEC,GADvE,SAERG,MAAMD,GAFE,cAErBE,EAFqB,gBAIdA,EAAKC,OAJS,mFAAH,wD,QCAtBC,EAAU,8BACVC,EAAS,mCAEFC,EAAW,uCAAG,WACvBC,EACAC,GAFuB,qCAAAT,EAAA,6DAGvBU,EAHuB,+BAGd,MACTC,EAJuB,+BAIhB,GACPC,EALuB,+BAKb,GAEJC,EAPiB,UAODR,EAPC,YAOUG,EAPV,uBAO6BF,GAP7B,OAOsCG,GACvDK,EAAU,CACZJ,SACAK,KAAM,OACNH,QAAQ,eACDA,IAII,SAAXF,GAAgC,QAAXA,IACrBI,EAAQH,KAAOK,KAAKC,UAAUN,IAjBX,SAoBAT,MAAMW,EAAYC,GApBlB,UAoBjBI,EApBiB,OAwBH,oCAFAA,EAASN,QAAQO,IAAI,gBAtBlB,kCAyBND,EAASd,OAzBH,uDA4BjB,IAAIgB,MAAM,2BA5BO,4CAAH,wDCHXC,EAAoB,SAAAlB,GAC7B,IAAMmB,EDiCyB,WAAgB,IAAfnB,EAAc,uDAAP,GACnCM,EAAQ,GAMZ,OAJAc,OAAOC,KAAKrB,GAAMsB,SAAQ,SAAAC,GACtBjB,GAAK,WAAQiB,EAAR,YAAevB,EAAKuB,OAGtBjB,ECxCakB,CAAoBxB,GAExC,OAAOI,EAAY,WAAYe,IAGtBM,EAAqB,SAAAzB,GAO9B,MAAO,CACH0B,QAAS,CACLC,KAAM,OACNrB,MAAO,qCACPsB,SAAU,KACVC,KAAM,KAEVC,SAAU,CACNC,KAAM,WACNC,QAAS,2BACTC,OAAQ,WACRtC,IAAK,SACLC,IAAK,UACLsC,YAAa,mBACbC,UAAW,mBACXC,gBAAiB,WACjBC,WAAY,QAEhBC,QAAS,CACLC,iBAAkB,WAClBC,YAAa,GACbC,aAAc,IACdC,cAAe,CACX,mFAEJC,qBAAsB,CAClB,SAEJC,WAAY,EACZC,YAAa,IACbC,SAAU,MACVC,SAAU,KACVC,OAAQ,EACRC,SAAU,GACVC,WAAY,EACZC,UAAW,GACXC,SAAU,EACVC,WAAY,IAEhBC,SAAU,CACN,aAAc,CACVC,KAAM,aACNC,WAAY,WACZC,MAAO,CACHC,QAAS,WACTC,OAAQ,WACRC,SAAU,WACVC,QAAS,WACTC,WAAY,gBACZC,kBAAmB,IAEvBC,QAAS,GACTC,QAAS,GACTC,QAAS,GACTC,UAAW,EACXC,QAAS,KACThB,SAAU,EACViB,OAAQ,CACJ,CACIC,KAAM,IACN9B,YAAa,GACbI,WAAY,GACZC,YAAa,GACbC,SAAU,MACVL,aAAc,IACdC,cAAe,CACX,6FAEJC,qBAAsB,CAClB,YAEJK,OAAQ,EACRC,SAAU,GACVI,WAAY,GACZN,SAAU,KACVG,WAAY,GACZqB,UAAW,GACXC,SAAU,GACVC,UAAW,GACXC,SAAU,GACVvB,UAAW,GACXwB,aAAc,EACdC,eAAgB,GAChBC,cAAe,EACfC,iBAAkB,GAClBC,iBAAkB,GAClBC,cAAe,EACfC,iBAAkB,EAClBC,YAAa,EACbC,aAAc,EACdC,gBAAiB,EACjBhC,SAAU,GAEd,CAAEkB,KAAM,OACR,CAAEA,KAAM,YAOfe,EAAuB,SAAArF,GAOhC,MAAO,CACH0B,QAAS,CACLC,KAAM,OACNrB,MAAO,qCACPsB,SAAU,KACVC,KAAM,KAEVC,SAAU,CACNC,KAAM,WACNC,QAAS,2BACTC,OAAQ,WACRtC,IAAK,SACLC,IAAK,UACLsC,YAAa,mBACbC,UAAW,mBACXC,gBAAiB,WACjBC,WAAY,QAEhBC,QAAS,CACLC,iBAAkB,WAClBC,YAAa,GACbC,aAAc,IACdC,cAAe,CACX,mFAEJC,qBAAsB,CAClB,SAEJC,WAAY,EACZC,YAAa,EACbC,SAAU,IACVC,SAAU,KACVC,OAAQ,EACRC,SAAU,GACVC,WAAY,EACZC,UAAW,GACXC,SAAU,EACVC,WAAY,IAEhBiC,WAAY,CACR,aAAc,CACV/B,KAAM,aACNC,WAAY,WACZC,MAAO,CACHC,QAAS,WACTC,OAAQ,WACRC,SAAU,WACVC,QAAS,WACTC,WAAY,kBACZC,kBAAmB,GAEvBC,QAAS,EACTC,QAAS,EACTC,QAAS,GACTC,UAAW,EACXC,QAAS,KACThB,SAAU,EACViB,OAAQ,CACJ,CACIC,KAAM,IACN9B,YAAa,GACbI,WAAY,EACZC,YAAa,IACbC,SAAU,MACVL,aAAc,IACdC,cAAe,CACX,mFAEJC,qBAAsB,CAClB,SAEJK,OAAQ,IACRC,SAAU,GACVI,WAAY,EACZN,SAAU,KACVG,WAAY,GACZqB,UAAW,GACXC,SAAU,GACVC,UAAW,GACXC,SAAU,GACVvB,UAAW,GACXwB,aAAc,EACdC,eAAgB,EAChBC,cAAe,EACfC,iBAAkB,EAClBC,iBAAkB,EAClBC,cAAe,EACfC,iBAAkB,EAClBC,YAAa,EACbC,aAAc,EACdC,gBAAiB,EACjBhC,SAAU,GAEd,CAAEkB,KAAM,OACR,CAAEA,KAAM,Y,kCCzNfiB,EACC,aADDA,EAEO,aCSPC,EAAa,WAAwD,IAAvDjC,EAAsD,uDAA/C,IAAIkC,KAAQC,EAAmC,uDAA1BH,EACnD,OAAOI,IAAOpC,GAAMmC,OAAOA,I,eCiEhBE,EAhEF,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,iBAAkBC,EAAwB,EAAxBA,kBAC9B,EAAkCC,mBAAS,IAAIN,MAA/C,mBAAOO,EAAP,KAAkBC,EAAlB,KAEMC,EAAc,SAACC,EAAK5C,GACtB,ODAqB,SAAC6C,EAASC,EAASxE,GAC5C,IAAMyE,EAAgBX,IAAOS,GACvBG,EAAgBZ,IAAOU,GAE7B,OAAIC,EAAgBC,EACTA,EAAcC,KAAKF,EAAezE,GAGtCyE,EAAcE,KAAKD,EAAe1E,GCR9B4E,CAAcN,EAAK5C,EAAM,SAG9BmD,EAAsB,WACxB,IAAMP,EDNsBR,MCMCgB,QAAQ,OAC/BpD,EAAOoC,IAAOK,GAAWW,QAAQ,OAEvC,OAAIR,EAAM5C,EACC,CACH8B,EACA,CAAEuB,gBAAiBpB,EAAWjC,EAAMgC,KAIxCY,EAAM5C,EACC,CACH9B,EACA,CAAEoF,cAAeX,EAAYC,EAAK5C,KAInC,CAACrC,EAAmB,KAGzB4F,EAAY,uCAAG,WAAMC,GAAN,yBAAAlH,EAAA,6DACjBkH,EAAMC,iBAENN,IAHiB,SAKPO,EAAW,CACb3G,MAAOyG,EAAMG,OAAO5G,MAAM6G,OANjB,EASgBT,KAAkC,GATlD,mBASNnG,EATM,KASE6G,EATF,cAWM7G,EAAO,2BAAK0G,GAAaG,IAX/B,OAWPpH,EAXO,OAab6F,EAAiB7F,GAbJ,kDAebqH,QAAQC,MAAR,MAfa,QAkBjBxB,GAAkB,GAlBD,0DAAH,sDAqBlB,OACI,uBAAMyB,UAAU,mBAAmBC,SAAUV,EAA7C,UACI,uBAAOW,QAAQ,QAAf,yDACA,uBAAOC,GAAG,QAAQ/F,KAAK,OAAOI,KAAK,QAAQ4F,YAAY,sBACvD,oFACA,cAAC,IAAD,CACIJ,UAAU,MACVK,SAAU5B,EACV6B,SAAU,SAAAtE,GAAI,OAAI0C,EAAa1C,MAEnC,uBAAO5B,KAAK,SAASwF,MAAM,eCvBxBW,EA5CK,SAAC,GAAqB,IACtC,EADqC,EAAlBC,aAcA,GAbnB,IACIjG,SAAYC,GADhB,aACyB,GADzB,GACgBA,KADhB,IAEIO,QACIE,GAHR,aAYQ,GAZR,GAGQA,YACAS,EAJR,EAIQA,SACAF,EALR,EAKQA,SACAK,EANR,EAMQA,SACAV,EAPR,EAOQA,cACAS,EARR,EAQQA,UACAE,EATR,EASQA,WACAT,EAVR,EAUQA,WACAD,EAXR,EAWQA,qBAIR,OACI,sBAAK4E,UAAU,yBAAf,UACI,qBAAKA,UAAU,oBAAf,SAAoCxF,IACpC,sBAAKwF,UAAU,2BAAf,UAA2C/E,EAA3C,gBAEA,sBAAK+E,UAAU,oBAAf,UAEI,sBAAKA,UAAU,aAAf,UACI,sBAAKA,UAAU,sBAAf,uBAAgDtE,EAAhD,QACA,sBAAKsE,UAAU,sBAAf,uBAAgDxE,EAAhD,UACA,sBAAKwE,UAAU,qBAAf,uBAA+CnE,QAGnD,qBAAKmE,UAAU,qBAAf,SACI,qBAAKS,IAAKtF,EAAeuF,IAAI,cAGjC,sBAAKV,UAAU,cAAf,UACI,sBAAKA,UAAU,2BAAf,yBAAuDpE,EAAvD,iBACA,qBAAKoE,UAAU,yBAAf,+BAAwDlE,EAAxD,SACA,qBAAKkE,UAAU,wBAAf,yBAAiD3E,EAAjD,iBAGR,sBAAK2E,UAAU,2BAAf,kBAAgD5E,SC6C7CuF,G,MA9EH,WACR,MAAsCnC,mBAAS,MAA/C,mBAAOgC,EAAP,KAAoBI,EAApB,KACA,EAAkCpC,oBAAS,GAA3C,mBAAOqC,EAAP,KAAkBC,EAAlB,KACA,EAA0CtC,oBAAS,GAAnD,mBAAOuC,EAAP,KAAsBC,EAAtB,KACA,EAAgCxC,mBAAS,IAAzC,mBAAOyC,EAAP,KAAiBC,EAAjB,KA2CA,OAzCAC,oBAAS,sBAAC,oCAAA7I,EAAA,sEACe,IAAI8I,SAAQ,SAAAC,GAC7BC,UAAUC,YAAYC,oBAAmB,SAAA/I,GACrC4I,EAAQ5I,EAAKgJ,cAHf,WACAA,EADA,QAOMC,UAAaD,EAAOE,UAP1B,uBAQFb,GAAa,GARX,mDAa0B3I,EAAgBsJ,EAAOC,SAAUD,EAAOE,WAblE,iDAagF,GAbhF,0BAaMC,YAbN,MAaa,GAbb,YAeiBjI,EAAkB,CAAEZ,MAAO6I,IAf5C,QAeInJ,EAfJ,OAiBFyI,EAAYU,GACZhB,EAAenI,GAlBb,kDAoBFqH,QAAQ+B,IAAR,MApBE,yBAsBFf,GAAa,GAtBX,6EAwBP,IAiBCD,EACO,oBAAIb,UAAU,aAAd,wBAIP,sBAAKA,UAAU,YAAf,UACI,oBAAIA,UAAU,aAAd,mCAEKiB,IAAaF,EAEN,sBAAKf,UAAU,sBAAf,UACI,oBAAGA,UAAU,iBAAb,yBACiBiB,KAEjB,wBAAQjB,UAAU,sBAAsB5F,KAAK,SAAS0H,QAAS,kBAAMd,GAAiB,IAAtF,gCAMJ,cAAC,EAAD,CACI1C,iBAAkBsC,EAClBrC,kBAAmByC,IAIlCR,GAAe,cAAC,EAAD,CAAaA,YAAaA,SCxEvCuB,EAZS,SAAAC,GAChBA,GAAeA,aAAuBC,UACtC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACzDJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDpBQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5Bb,M","file":"static/js/main.010bcf2c.chunk.js","sourcesContent":["// https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=37.42159&longitude=-122.0837&localityLanguage=ru\r\n\r\nexport const getUserLocation = async (lat, lon) => {\r\n    const url = `https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${lat}&longitude=${lon}`;\r\n    const data = await fetch(url);\r\n\r\n    return await data.json();\r\n};","// const baseUrl = process.env.REACT_APP_API_URL;\r\n// const apiKey = process.env.REACT_APP_API_KEY;\r\nconst baseUrl = 'http://api.weatherstack.com';\r\nconst apiKey = '5d479d3903cd2a94298354f2a1e257f1';\r\n\r\nexport const sendRequest = async (\r\n    path,\r\n    query,\r\n    method = 'GET',\r\n    body = {},\r\n    headers = {},\r\n) => {\r\n    const requestUrl = `${baseUrl}/${path}?access_key=${apiKey}${query}`;\r\n    const options = {\r\n        method,\r\n        mode: 'cors',\r\n        headers: {\r\n            ...headers,\r\n        }\r\n    };\r\n\r\n    if (method === 'POST' || method === 'PUT') {\r\n        options.body = JSON.stringify(body);\r\n    }\r\n\r\n    const response = await fetch(requestUrl, options);\r\n\r\n    const contentType = response.headers.get('Content-Type');\r\n\r\n    if (contentType === 'application/json; Charset=UTF-8') {\r\n        return await response.json();\r\n    }\r\n\r\n    throw new Error('Unexpected content type');\r\n};\r\n\r\nexport const generateQueryString = (data = {}) => {\r\n    let query = '';\r\n\r\n    Object.keys(data).forEach(key => {\r\n        query += `&${key}=${data[key]}`;\r\n    });\r\n\r\n    return query;\r\n};","import { generateQueryString, sendRequest } from './index';\r\n\r\nexport const getCurrentWeather = data => {\r\n    const queryString = generateQueryString(data);\r\n\r\n    return sendRequest('/current', queryString);\r\n};\r\n\r\nexport const getForecastWeather = data => {\r\n    // const queryString = generateQueryString(data);\r\n    //\r\n    // return sendRequest('/forecast', queryString);\r\n\r\n    // we use placeholder due to the fact that our API plan do not support this\r\n    // API method\r\n    return {\r\n        request: {\r\n            type: 'City',\r\n            query: 'New York, United States of America',\r\n            language: 'en',\r\n            unit: 'm'\r\n        },\r\n        location: {\r\n            name: 'New York',\r\n            country: 'United States of America',\r\n            region: 'New York',\r\n            lat: '40.714',\r\n            lon: '-74.006',\r\n            timezone_id: 'America/New_York',\r\n            localtime: '2019-09-07 11:38',\r\n            localtime_epoch: 1567856280,\r\n            utc_offset: '-4.0'\r\n        },\r\n        current: {\r\n            observation_time: '03:38 PM',\r\n            temperature: 18,\r\n            weather_code: 113,\r\n            weather_icons: [\r\n                'https://assets.weatherstack.com/images/wsymbols01_png_64/wsymbol_0001_sunny.png'\r\n            ],\r\n            weather_descriptions: [\r\n                'Sunny'\r\n            ],\r\n            wind_speed: 0,\r\n            wind_degree: 345,\r\n            wind_dir: 'NNW',\r\n            pressure: 1011,\r\n            precip: 0,\r\n            humidity: 58,\r\n            cloudcover: 0,\r\n            feelslike: 18,\r\n            uv_index: 5,\r\n            visibility: 16\r\n        },\r\n        forecast: {\r\n            '2019-09-07': {\r\n                date: '2019-09-07',\r\n                date_epoch: 1567814400,\r\n                astro: {\r\n                    sunrise: '06:28 AM',\r\n                    sunset: '07:19 PM',\r\n                    moonrise: '03:33 PM',\r\n                    moonset: '12:17 AM',\r\n                    moon_phase: 'First Quarter',\r\n                    moon_illumination: 54\r\n                },\r\n                mintemp: 17,\r\n                maxtemp: 25,\r\n                avgtemp: 21,\r\n                totalsnow: 0,\r\n                sunhour: 10.3,\r\n                uv_index: 5,\r\n                hourly: [\r\n                    {\r\n                        time: '0',\r\n                        temperature: 18,\r\n                        wind_speed: 28,\r\n                        wind_degree: 15,\r\n                        wind_dir: 'NNE',\r\n                        weather_code: 122,\r\n                        weather_icons: [\r\n                            'https://assets.weatherstack.com/images/wsymbols01_png_64/wsymbol_0004_black_low_cloud.png'\r\n                        ],\r\n                        weather_descriptions: [\r\n                            'Overcast'\r\n                        ],\r\n                        precip: 0,\r\n                        humidity: 68,\r\n                        visibility: 10,\r\n                        pressure: 1008,\r\n                        cloudcover: 75,\r\n                        heatindex: 18,\r\n                        dewpoint: 12,\r\n                        windchill: 18,\r\n                        windgust: 35,\r\n                        feelslike: 18,\r\n                        chanceofrain: 0,\r\n                        chanceofremdry: 87,\r\n                        chanceofwindy: 0,\r\n                        chanceofovercast: 90,\r\n                        chanceofsunshine: 15,\r\n                        chanceoffrost: 0,\r\n                        chanceofhightemp: 0,\r\n                        chanceoffog: 0,\r\n                        chanceofsnow: 0,\r\n                        chanceofthunder: 0,\r\n                        uv_index: 0\r\n                    },\r\n                    { time: '300' },\r\n                    { time: '600' },\r\n                ]\r\n            }\r\n        }\r\n    };\r\n};\r\n\r\nexport const getHistoricalWeather = data => {\r\n    // const queryString = generateQueryString(data);\r\n    //\r\n    // return sendRequest('/historical', queryString);\r\n\r\n    // we use placeholder due to the fact that our API plan do not support this\r\n    // API method\r\n    return {\r\n        request: {\r\n            type: 'City',\r\n            query: 'New York, United States of America',\r\n            language: 'en',\r\n            unit: 'm'\r\n        },\r\n        location: {\r\n            name: 'New York',\r\n            country: 'United States of America',\r\n            region: 'New York',\r\n            lat: '40.714',\r\n            lon: '-74.006',\r\n            timezone_id: 'America/New_York',\r\n            localtime: '2019-09-07 10:05',\r\n            localtime_epoch: 1567850700,\r\n            utc_offset: '-4.0'\r\n        },\r\n        current: {\r\n            observation_time: '02:05 PM',\r\n            temperature: 20,\r\n            weather_code: 113,\r\n            weather_icons: [\r\n                'https://assets.weatherstack.com/images/wsymbols01_png_64/wsymbol_0001_sunny.png'\r\n            ],\r\n            weather_descriptions: [\r\n                'Sunny'\r\n            ],\r\n            wind_speed: 0,\r\n            wind_degree: 0,\r\n            wind_dir: 'N',\r\n            pressure: 1111,\r\n            precip: 0,\r\n            humidity: 95,\r\n            cloudcover: 0,\r\n            feelslike: 18,\r\n            uv_index: 3,\r\n            visibility: 12\r\n        },\r\n        historical: {\r\n            '2008-07-01': {\r\n                date: '2008-07-01',\r\n                date_epoch: 1214870400,\r\n                astro: {\r\n                    sunrise: '05:29 AM',\r\n                    sunset: '08:31 PM',\r\n                    moonrise: '03:24 AM',\r\n                    moonset: '07:37 PM',\r\n                    moon_phase: 'Waning Crescent',\r\n                    moon_illumination: 4\r\n                },\r\n                mintemp: 0,\r\n                maxtemp: 0,\r\n                avgtemp: 19,\r\n                totalsnow: 0,\r\n                sunhour: 14.5,\r\n                uv_index: 4,\r\n                hourly: [\r\n                    {\r\n                        time: '0',\r\n                        temperature: 27,\r\n                        wind_speed: 7,\r\n                        wind_degree: 201,\r\n                        wind_dir: 'SSW',\r\n                        weather_code: 113,\r\n                        weather_icons: [\r\n                            'https://assets.weatherstack.com/images/wsymbols01_png_64/wsymbol_0001_sunny.png'\r\n                        ],\r\n                        weather_descriptions: [\r\n                            'Sunny'\r\n                        ],\r\n                        precip: 1.8,\r\n                        humidity: 80,\r\n                        visibility: 9,\r\n                        pressure: 1011,\r\n                        cloudcover: 15,\r\n                        heatindex: 25,\r\n                        dewpoint: 20,\r\n                        windchill: 24,\r\n                        windgust: 11,\r\n                        feelslike: 25,\r\n                        chanceofrain: 0,\r\n                        chanceofremdry: 0,\r\n                        chanceofwindy: 0,\r\n                        chanceofovercast: 0,\r\n                        chanceofsunshine: 0,\r\n                        chanceoffrost: 0,\r\n                        chanceofhightemp: 0,\r\n                        chanceoffog: 0,\r\n                        chanceofsnow: 0,\r\n                        chanceofthunder: 0,\r\n                        uv_index: 6\r\n                    },\r\n                    { time: '300' },\r\n                    { time: '600' },\r\n                ]\r\n            }\r\n        }\r\n    };\r\n};","export const DATE_FORMATS = {\r\n    fullDate: 'DD-MM-YYYY',\r\n    dateForHistory: 'YYYY-MM-DD'\r\n}","import moment from 'moment';\r\nimport { DATE_FORMATS } from '../constants/dates';\r\n\r\nexport const addDate = (date = new Date(), count, units) => {\r\n    return moment(date).add(count, units);\r\n};\r\n\r\nexport const subtrDate = (date = new Date(), count, units) => {\r\n    return moment(date).subtract(count, units);\r\n};\r\n\r\nexport const formatDate = (date = new Date(), format = DATE_FORMATS.fullDate) => {\r\n    return moment(date).format(format);\r\n};\r\n\r\nexport const getCurrentDate = () => moment();\r\n\r\nexport const getDifference = (dateOne, dateTwo, unit) => {\r\n    const momentDateOne = moment(dateOne);\r\n    const momentDateTwo = moment(dateTwo);\r\n\r\n    if (momentDateOne < momentDateTwo) {\r\n        return momentDateTwo.diff(momentDateOne, unit);\r\n    }\r\n\r\n    return momentDateOne.diff(momentDateTwo, unit);\r\n};","// libraries\r\nimport React, { useState } from 'react';\r\nimport DatePicker from 'react-datepicker';\r\nimport moment from 'moment';\r\n// api\r\nimport { getHistoricalWeather, getForecastWeather, getCurrentWeather } from 'api/weather';\r\n// constants\r\nimport { DATE_FORMATS } from 'constants/dates';\r\n// helpers\r\nimport { formatDate, getCurrentDate, getDifference } from 'helpers/dates';\r\n// styles\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\n\r\nconst Form = ({ onSubmitCallback, closeFormCallback }) => {\r\n    const [startDate, setStartDate] = useState(new Date());\r\n\r\n    const getDateDiff = (now, date) => {\r\n        return getDifference(now, date, 'days');\r\n    };\r\n\r\n    const getMethodForWeather = () => {\r\n        const now = getCurrentDate().startOf('day');\r\n        const date = moment(startDate).startOf('day');\r\n\r\n        if (now > date) {\r\n            return [\r\n                getHistoricalWeather,\r\n                { historical_date: formatDate(date, DATE_FORMATS.dateForHistory) },\r\n            ];\r\n        }\r\n\r\n        if (now < date) {\r\n            return [\r\n                getForecastWeather,\r\n                { forecast_days: getDateDiff(now, date) },\r\n            ];\r\n        }\r\n\r\n        return [getCurrentWeather, {}];\r\n    };\r\n\r\n    const handleSubmit = async event => {\r\n        event.preventDefault();\r\n\r\n        getMethodForWeather(startDate);\r\n        try {\r\n            const formData = {\r\n                query: event.target.query.value,\r\n            };\r\n\r\n            const [method, methodData] = getMethodForWeather(startDate) || [];\r\n\r\n            const data = await method({ ...formData, ...methodData });\r\n\r\n            onSubmitCallback(data);\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n\r\n        closeFormCallback(false);\r\n    };\r\n\r\n    return (\r\n        <form className=\"input__city-form\" onSubmit={handleSubmit}>\r\n            <label htmlFor=\"query\">Hey, bro, let see the weather in your city!</label>\r\n            <input id=\"query\" type=\"text\" name=\"query\" placeholder=\"Please enter city\" />\r\n            <h6>Here you can check historical or forecast weather!</h6>\r\n            <DatePicker\r\n                className=\"asd\"\r\n                selected={startDate}\r\n                onChange={date => setStartDate(date)}\r\n            />\r\n            <input type=\"submit\" value=\"Submit\" />\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default Form;","// libraries\r\nimport React from 'react';\r\n// styles\r\n\r\n\r\nconst WeatherCard = ({ weatherData }) => {\r\n    const {\r\n        location: { name } = [],\r\n        current: {\r\n            temperature,\r\n            humidity,\r\n            pressure,\r\n            uv_index,\r\n            weather_icons,\r\n            feelslike,\r\n            visibility,\r\n            wind_speed,\r\n            weather_descriptions\r\n        } = {},\r\n    } = weatherData || {};\r\n\r\n    return (\r\n        <div className=\"weathercard__container\">\r\n            <div className=\"weathercard__city\">{name}</div>\r\n            <div className=\"weathercard__temperature\">{temperature}&#xb0;С</div>\r\n\r\n            <div className=\"weathercard__info\">\r\n\r\n                <div className=\"info__left\">\r\n                    <div className=\"info__left-humidity\">Humidity: {humidity} %</div>\r\n                    <div className=\"info__left-pressure\">Pressure: {pressure} hPa</div>\r\n                    <div className=\"info__left-uvindex\">UV_index: {uv_index}</div>\r\n                </div>\r\n\r\n                <div className=\"info__center-image\">\r\n                    <img src={weather_icons} alt=\"weather\" />\r\n                </div>\r\n\r\n                <div className=\"info__right\">\r\n                    <div className=\"info__right-descriptions\">Feels like: {feelslike} &#xb0;С</div>\r\n                    <div className=\"info__right-visibility\">{`Visibility: ${visibility} km`}</div>\r\n                    <div className=\"info__right-windspeed\">{`Wind: ${wind_speed} km/h`}</div>\r\n                </div>\r\n            </div>\r\n            <div className=\"info__right-descriptions\">Sky: {weather_descriptions}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WeatherCard;","// libraries\r\nimport React, { useState, useEffect } from 'react';\r\n// api\r\nimport { getUserLocation } from 'api/location';\r\nimport { getCurrentWeather } from 'api/weather';\r\n// components\r\nimport Form from 'components/shared/Form';\r\nimport WeatherCard from 'components/WeatherCard';\r\n// styles\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n    const [weatherData, setWeatherData] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [isFormVisible, setIsFormVisible] = useState(false);\r\n    const [userCity, setUserCity] = useState('');\r\n\r\n    useEffect(async () => {\r\n        const coords = await new Promise(resolve => {\r\n            navigator.geolocation.getCurrentPosition(data => {\r\n                resolve(data.coords);\r\n            });\r\n        });\r\n\r\n        if (!coords.latitude && !coords.longitude) {\r\n            setIsLoading(false);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const { city = '' } = await getUserLocation(coords.latitude, coords.longitude) || {};\r\n\r\n            const data = await getCurrentWeather({ query: city });\r\n\r\n            setUserCity(city);\r\n            setWeatherData(data);\r\n        } catch (e) {\r\n            console.log(e);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    }, []);\r\n\r\n    // This method will be called every time when userCity dependency will be changed\r\n    // useEffect(async () => {\r\n    //     if (!userCity) {\r\n    //         return;\r\n    //     }\r\n    //\r\n    //     try {\r\n    //         const data = await getCurrentWeather({ query: userCity });\r\n    //\r\n    //         setWeatherData(data);\r\n    //     } catch (e) {\r\n    //         console.error(e);\r\n    //     }\r\n    // }, [userCity]);\r\n\r\n    if (isLoading) {\r\n        return <h2 className=\"page-title\">Loading...</h2>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h2 className=\"page-title\">Get Weather for free!</h2>\r\n            {\r\n                (userCity && !isFormVisible)\r\n                    ? (\r\n                        <div className=\"sub-title-container\">\r\n                            <p className=\"page-sub-title\">\r\n                                Weather for {userCity}\r\n                            </p>\r\n                            <button className=\"button button-style\" type=\"button\" onClick={() => setIsFormVisible(true)}>\r\n                                Change Location\r\n                            </button>\r\n                        </div>\r\n                    )\r\n                    : (\r\n                        <Form\r\n                            onSubmitCallback={setWeatherData}\r\n                            closeFormCallback={setIsFormVisible}\r\n                        />\r\n                    )\r\n            }\r\n            {weatherData && <WeatherCard weatherData={weatherData} />}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from 'components/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();"],"sourceRoot":""}